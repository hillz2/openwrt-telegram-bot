#!/bin/sh

PATH='/usr/bin:/usr/sbin:/bin:/sbin'

token=$(uci get telegram-bot.config.bot_token 2>/dev/nul)
chat_id=$(uci get telegram-bot.config.chat_id 2>/dev/nul)
server=$(uci get telegram-bot.config.server 2>/dev/nul)
timeout=$(uci get telegram-bot.config.timeout 2>/dev/nul)
polling_time=$(uci get telegram-bot.config.polling_time 2>/dev/nul)

if [ -z "$token" ]; then
	echo "token is empty"
	exit 2
fi

if [ -z "$chat_id" ]; then
	echo "chat_id is empty"
	exit 2
fi

if [ -z "$server" ]; then
	server="https://api.telegram.org"
fi

if [ -z "$timeout" ]; then
	timeout=3
fi

if [ -z "$polling_time" ]; then
	polling_time=1
fi

api="${server}/bot${token}"

if [ ! -d "/tmp/telegram-bot" ]; then
	mkdir /tmp/telegram-bot
fi

plugins="/usr/lib/telegram-bot/plugins"
#telegram_log_file=/tmp/telegram-bot/telegram.log
telegram_log_file=/dev/null
offset_file=/tmp/telegram-bot/telegram_offset

command_not_found="Sorry,
I only recognize *commands*.
Commands are words beginning with a slash.
Try it !
Send [/start](/start) to get my commands list."

command_start="*/free* RAM & Disk space
*/uptime* Uptime of the device
*/vnstat* Check bandwidth usage
*/ping_log* Check /tmp/ping.log
*/list_inbox* Show SMS inbox
*/modem_info* Modem info
*/crypto* Check your crypto investment
*/reboot* Reboot the device
*/<script_name>* any scripts in the \`plugins\` directory"

device_name=$(cat /tmp/sysinfo/model)
curl -k -m 3 -s -X POST $api/sendMessage -d chat_id=$chat_id --data-urlencode text="Router started: ${device_name}" &> $telegram_log_file

if [ -f "$offset_file" ] ; then
	offset=$( cat $offset_file )
else
	offset=0
	echo $offset > $offset_file
fi

reply_to_msg () {
	local msg_id=$1
	local origin=$2
	eval local text="$3"
	curl -k -m 3 -s -X POST $api/sendMessage -d reply_to_message_id=$msg_id -d chat_id=$origin --data-urlencode text="$text" &> $telegram_log_file
}

while [ true ]
do
	updates=$(curl -s -m 3 -k -X GET ${api}/getUpdates?offset=${offset}&timeout=${timeout})
	status=$(jsonfilter -s "$updates" -e $.ok)
	if [ $status = 'true' ]; then
		update_ids=$(jsonfilter -s "$updates" -e $.result[*].update_id)
		for update_id in $update_ids
		do
			offset=$((update_id+1))
			echo $offset > $offset_file
			origin=$(jsonfilter -s "$updates"  -e "$.result[@.update_id=$update_id].message.chat.id")
			msg_id=$(jsonfilter -s "$updates"  -e "$.result[@.update_id=$update_id].message.message_id")
			command=$(jsonfilter -s "$updates" -e "$.result[@.update_id=$update_id].message.text")
			is_a_cmd=$(jsonfilter -s "$updates" -e "$.result[@.update_id=$update_id].message.entities[*].type")
			query_ans=$(jsonfilter -s "$updates" -e "$.result[@.update_id=$update_id].callback_query.id")
			origin_ans=$(jsonfilter -s "$updates"  -e "$.result[@.update_id=$update_id].callback_query.message.chat.id")
			if [[ "$origin" != "$chat_id" && "$origin_ans" != "$chat_id" ]];then
				curl -k -m 3 -s -X POST $api/sendMessage -d reply_to_message_id=$msg_id -d chat_id=$origin --data-urlencode \
					text="This is a Private bot. If you want to implement one for you, check this out https://github.com/ixiumu/openwrt-telegram-bot" &> $telegram_log_file
				curl -k -m 3 -s -X POST $api/leaveChat -d chat_id=$origin  &> $telegram_log_file
			else
				if [ $(echo "$is_a_cmd" | grep "bot_command") != "" ]; then
					cmd=$(echo $command | awk '{print $1}')
					prms=$(echo $command | awk '{$1="";print $0}' | sed 's/^[ \t]*//g')
					parms=${prms//[\"\&\;\\\>\<\|]/}
					DATE=`date +%Y-%m-%d_%H:%M:%S`
					RETURN_TEXT=""
					case "$cmd" in
						("/start")
							reply_to_msg $msg_id $origin "\${command_start}"
							;;
						("/reboot")
							(echo "Call $cmd" | logger -t "telegram_bot" -p daemon.info) && RETURN_TEXT="Command executed!"
							reply_to_msg $msg_id $origin "\${RETURN_TEXT}" && sleep 5 && reboot
							;;
						(*)
							if [ -f "${plugins}/${cmd}.sh" ] ; then
								(echo "Call $cmd [$parms]" | logger -t "telegram_bot" -p daemon.info) && RETURN_TEXT=$(${plugins}/${cmd}.sh ${parms})
							else
								RETURN_TEXT="Command *${cmd}* not found!"
							fi
							reply_to_msg $msg_id $origin "\${RETURN_TEXT}"
							;;
					esac
				else
					reply_to_msg $msg_id $origin "\${command_not_found}"
				fi
			fi
		done
	fi
	sleep $polling_time
done&
